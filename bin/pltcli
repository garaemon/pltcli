#!/usr/bin/env python
"""
pltcli is a command line tool to visualize csv data
with several plots.
"""

# -*- mode: python -*-
import matplotlib as mpl
import os

# If no DISPLAY is available, we cannot use
# GUI backends.
if not os.environ.has_key("DISPLAY"):
    mpl.use("AGG")
# mpl.use('Qt4Agg')
# mpl.use('GTKCairo')
# mpl.use('GTK')
# mpl.use('WXAgg')
import matplotlib.pyplot as plt
# plt.ion()
import argparse
import sys
import csv
import re
from itertools import chain
import numpy as np
import thread
import threading
from scipy import optimize
from numpy import exp

def fit_parabora_func(parameter,x,y):
    a = parameter[0]
    b = parameter[1]
    # c = parameter[2]
    residual = y-(a*x**2+b*x)
    return residual
# def fit_parabora_inv_func(parameter,x,y):
def fit_parabora_inv_func(x, a, b, c,d):
    # a = parameter[0]
    # b = parameter[1]
    # c = parameter[2]
    # d = parameter[3]
    # c = parameter[2]
    # residual = y-(a*x**2+b*x)
    # residual = y-(exp(a * x + b)*c+d)
    # return residual
    return  a * np.exp(-b * x+c)+d
    # return b / (1 + a * x ** 2) + c


def raw_input_with_timeout(prompt, timeout=30.0):
    print prompt,
    timer = threading.Timer(timeout, thread.interrupt_main)
    astring = None
    try:
        timer.start()
        astring = raw_input(prompt)
    except KeyboardInterrupt:
        pass
    timer.cancel()
    return astring


class ConfigParser(object):
    """
    ConfigParser class is a generic interface
    for command line options and configuration file based options.
    Currently only argument parsing is supported.
    """
    def __init__(self):
        pass
    def arg_parser(self):
        parser = argparse.ArgumentParser(prog='pltcli')
        parser.add_argument("--type", "-t", default="line",
                            help="Chart type. default is line (%s)"
                            % ", ".join([p.plotter_name[0]
                                         for p in PLOTTER_CLASSES]))
        parser.add_argument("files", nargs='+', default=[], help="csv files to plot.")
        parser.add_argument("--label", action="append", default=[],
                            help="Labels of files which are used in legends.")
        parser.add_argument("--alpha", type=float, default=1,
                            help="transparency parmaeter")
        parser.add_argument("--color-offset", type=int, default=0)
        parser.add_argument("--fill", action="store_true", help="Fill plot")
        parser.add_argument("--line-width", type=float, default=1,
                            help="line width")
        parser.add_argument("--title", help="title")
        parser.add_argument("--x-title", help="title on x axis")
        parser.add_argument("--y-title", help="title on y axis")
        parser.add_argument("--min-x", default=None, type=float,
                            help="Minimum x value")
        parser.add_argument("--max-x", default=None, type=float,
                            help="Maximum x value")
        parser.add_argument("--min-y", default=None, type=float,
                            help="Minimum y value")
        parser.add_argument("--max-y", default=None, type=float,
                            help="Maximum y value")
        parser.add_argument("--no-x-ticks", action="store_true",
                            help="Do not show x ticks")
        parser.add_argument("--no-y-ticks", action="store_true",
                            help="Do not show y ticks")
        parser.add_argument("--no-legend", action="store_true",
                            help="Do not show legends")
        parser.add_argument("--show-grid", action="store_true",
                            help="Show grid")
        parser.add_argument("--scatter-size", default=20, type=float,
                            help="Size of scatter circles")
        parser.add_argument("--color-theme", default="d3js10",
                            help="color theme (%s)"
                            % ", ".join([t.theme_name[0]
                                         for t in THEME_CLASSES]))
        parser.add_argument("--output", "-o", help="output to image file")
        parser.add_argument("--sort-x", action="store_true",
                            help="sort x values")
        parser.add_argument("--tight", action="store_true",
                            help="set range of x and y strictly from dataset")
        parser.add_argument("--legend-pos", default="ru",
                            help="position of legend (ru, lu, rl, ll)")
        parser.add_argument("--filter",
                            help="filter data by inline python")
        parser.add_argument("--fit-parabora", action="store_true")
        parser.add_argument("--fit-parabora-inv", action="store_true")
        return parser

class Theme(object):
    """
    Super class for color theme.
    It requires following methods to subclasses:
      - colorCycle: return a list of colors to plot different sources.
    It required following attributes to subclasses:
      - theme_name: a list of names to represent the color theme.
    """
    def __init__(self, offset):
        self.offset = offset
    def colorCycleImpl(self):
        raise Exception("colorCycleImpl is not yet implemented")
    def colorCycle(self):
        cycle = self.colorCycleImpl()
        return cycle[self.offset:len(cycle)] + cycle[0:self.offset]

class D3JSTheme10(Theme):
    """
    see https://github.com/mbostock/d3/wiki/Ordinal-Scales#category10
    """
    theme_name = ["d3js10", "D3JSTheme10"]
    def colorCycleImpl(self):
        return ["#1f77b4",
                "#ff7f0e",
                "#2ca02c",
                "#d62728",
                "#9467bd",
                "#8c564b",
                "#e377c2",
                "#7f7f7f",
                "#bcbd22",
                "#17becf"]


class D3JSTheme20(Theme):
    """
    see https://github.com/mbostock/d3/wiki/Ordinal-Scales#category20
    """
    theme_name = ["d3js20", "D3JSTheme20"]
    def colorCycleImpl(self):
        return ["#1f77b4",
                "#aec7e8",
                "#ff7f0e",
                "#ffbb78",
                "#2ca02c",
                "#98df8a",
                "#d62728",
                "#ff9896",
                "#9467bd",
                "#c5b0d5",
                "#8c564b",
                "#c49c94",
                "#e377c2",
                "#f7b6d2",
                "#7f7f7f",
                "#c7c7c7",
                "#bcbd22",
                "#dbdb8d",
                "#17becf",
                "#9edae5"]

# List of theme classes
THEME_CLASSES = [D3JSTheme10, D3JSTheme20]

def expandFile(filename):
    """
    return a list of tuples like (filename, x_field, y_filed).
    If filename is like foo.csv, it returns [(foo.csv, 0, 1)].
    If filename is like foo.csv[x:y], it returns [(foo.csv, x, y)].
    """
    # Regular expressoin to check filename has field suffix like
    # foo.csv[0:1]
    suffix_field_reg = re.compile('^(.*)\[(.*)\]$')
    if suffix_field_reg.match(filename):
        suffix = suffix_field_reg.match(filename).group(2)
        # fields := [[0, 1], [0, 2], ...]
        fields = [fields.split(":") for fields in suffix.split(",")]
        if len(fields[0]) == 3:
            return [(suffix_field_reg.match(filename).group(1), xfield, yfield, zfield)
                    for xfield, yfield, zfield in fields]
        else:
            return [(suffix_field_reg.match(filename).group(1), xfield, yfield, 2)
                    for xfield, yfield in fields]
    else:
        return [(filename, 0, 1, 2)]

class FileData(object):
    # Use regular expression to check value is able to be parsed
    # into float value
    # see http://d.hatena.ne.jp/artgear/20130222/float_type_regular_expression
    float_reg = re.compile('^[+-]?(\d*\.\d+|\d+\.?\d*)([eE][+-]?\d+|)\Z')
    int_reg = re.compile('^[+-]?(\d+)')
    def __init__(self, filename, xfield, yfield, zfield=None,
                 has_index=True, label=None, filter=None):
        self.filter = filter
        self.filename = filename
        self.xfield = xfield
        self.yfield = yfield
        self.zfield = zfield
        self.has_index = has_index
        self.label = label
        if not os.path.exists(self.filename):
            raise Exception("%s does not exists" % (self.filename))
    def read(self):
        """
        read data from csv file and store it in data attribute.
        data is an array of arrays.
        If the csv file has index line at the first line, index srings
        will be stored in index attributes.
        """
        with open(self.filename, "r") as f:
            reader = csv.reader(f)
            if self.has_index:
                # if has_index is true, store index labels
                # in self.index
                self.index = reader.next()
            self.data = []
            for row in reader:
                if row:
                    if self.filter:
                        eval_result = eval(self.filter)
                        if eval_result:
                            self.data.append(self.parseFileRow(row))
                    else:
                        self.data.append(self.parseFileRow(row))
                    # setup xfield_index and yfield_index
        if isinstance(self.xfield, int):
            self.xfield_index = self.xfield
            self.xfield = self.index[self.xfield_index]
        elif self.int_reg.match(self.xfield):
            self.xfield_index = int(self.xfield)
            self.xfield = self.index[self.xfield_index]
        else:
            self.xfield_index = self.index.index(self.xfield)
        if isinstance(self.yfield, int):
            self.yfield_index = self.yfield
            self.yfield = self.index[self.yfield_index]
        elif self.int_reg.match(self.yfield):
            self.yfield_index = int(self.yfield)
            self.yfield = self.index[self.yfield_index]
        else:
            self.yfield_index = self.index.index(self.yfield)
        if self.zfield:
            if isinstance(self.zfield, int):
                self.zfield_index = self.zfield
            elif self.int_reg.match(self.zfield):
                self.zfield_index = int(self.zfield)
            else:
                self.zfield_index = self.index.index(self.zfield)
    def parseFileRow(self, row):
        """
        row is a list of strings.
        """
        parsed_row = []
        for r in row:
            if self.float_reg.match(r):
                parsed_row.append(float(r))
            else:
                parsed_row.append(r)
        return parsed_row
    def xs(self):
        """get x values"""
        return np.array([d[self.xfield_index] for d in self.data])
    def ys(self):
        """get y values"""
        return np.array([d[self.yfield_index] for d in self.data])
    def zs(self):
        """get z values"""
        return np.array([d[self.zfield_index] for d in self.data])
    def indexFromFieldName(self, field):
        return self.index.index(field)
    def getDataFromField(self, field):
        return np.array([d[self.indexFromFieldName(field)] for d in self.data])
    def getLabel(self):
        if self.label:
            return self.label
        else:
            return "%s[%s:%s]" % (self.filename, self.xfield, self.yfield)

class Plotter(object):
    def run(self, data, **args):
        raise Exception("Need to overload")

class ScatterPlotter(Plotter):
    plotter_name = ["scatter", "2dscatter", "points"]
    def run(self, data, show_grid=False,
            tight=False, alpha=1.0, color_theme=None,
            scatter_size=None, **args):
        ax = plt.gca()
        min_x = sys.float_info.max
        max_x = -sys.float_info.max
        min_y = sys.float_info.max
        max_y = -sys.float_info.max
        for d, i in zip(data, range(len(data))):
            xs = d.xs()
            ys = d.ys()
            print "Plotting", d.getLabel()
            c = color_theme.colorCycle()[i % len(color_theme.colorCycle())]
            ax.scatter(xs, ys, s=scatter_size, label=d.getLabel(), alpha=alpha, color=c)
            min_x = min(min_x, np.amin(xs))
            max_x = max(max_x, np.amax(xs))
            min_y = min(min_y, np.amin(ys))
            max_y = max(max_y, np.amax(ys))
        if tight:
            ax.set_xlim(min_x, max_x)
            ax.set_ylim(min_y, max_y)
        if show_grid:
            ax.grid()
        return ax

class HistogramPlotter(Plotter):
    plotter_name = ["histogram", "hist"]
    def run(self, data,
            show_grid=False, color_theme=None,
            alpha=None,
            **args):
        ax = plt.gca()
        for d, i in zip(data, range(len(data))):
            xs = d.xs()
            ys = d.ys()
            # estimate width
            width = (max(xs) - min(xs)) / len(xs) / len(data)
            c = color_theme.colorCycle()[i % len(color_theme.colorCycle())]
            ax.bar(xs + i*width, ys, width=width, label=d.getLabel(),
                   align="center", color=c,
                   alpha=alpha)
        if show_grid:
            ax.grid()
        return ax

class LinePlotter(Plotter):
    plotter_name = ["line", "2dline"]
    def run(self, data, show_grid=False,
            sort_x=False, tight=False,
            alpha=None,
            fill=False,
            line_width=1,
            color_theme=None,
            fit_parabora=None,
            fit_parabora_inv=None,
            **args):
        """
        Plot data using line plotting.
        """
        ax = plt.gca()
        min_x = sys.float_info.max
        max_x = -sys.float_info.max
        min_y = sys.float_info.max
        max_y = -sys.float_info.max
        for d, i in zip(data, range(len(data))):
            xs = d.xs()
            ys = d.ys()
            c = color_theme.colorCycle()[i % len(color_theme.colorCycle())]
            concatenated = zip(xs, ys)
            if sort_x:
                concatenated.sort(key=lambda x: x[0])
                xs = [x[0] for x in concatenated]
                ys = [x[1] for x in concatenated]
            print "Plotting", d.getLabel()
            line, = ax.plot(xs, ys, label=d.getLabel(), alpha=alpha,
                            lw=line_width)
            line.set_antialiased(True)
            min_x = min(min_x, np.amin(xs))
            max_x = max(max_x, np.amax(xs))
            min_y = min(min_y, np.amin(ys))
            max_y = max(max_y, np.amax(ys))
            if fill:
                ax.fill_between(xs, ys, facecolor=c)
            if fit_parabora:
                moved_xs = xs - xs[0]
                result = optimize.leastsq(fit_parabora_func,
                                          [0,0],
                                          args=(moved_xs, ys - ys[0]))

                a = result[0][0]
                b = result[0][1]

                aa = a
                bb = - 2 * a * xs[0] + b
                cc = a * xs[0] * xs[0] - b * xs[0] + ys[0]
                # c_fit=result[0][2]
                # x -> x+xs[0]
                print "Fitting result:", (aa, bb, cc)
                ax.plot(xs, aa * xs ** 2 + bb * xs + cc,
                        c="gray")
            if fit_parabora_inv:
                result = optimize.curve_fit(fit_parabora_inv_func,
                                            xs, ys)
                a = result[0][0]
                b = result[0][1]
                c = result[0][2]
                d = result[0][3]
                # c_fit=result[0][2]
                # x -> x+xs[0]
                print "Fitting result:", (a, b, c, d)
                ax.plot(xs, fit_parabora_inv_func(xs, a, b, c,d),
                        c="gray")
        if tight:
            ax.set_xlim(min_x, max_x)
            ax.set_ylim(min_y, max_y)
        if show_grid:
            ax.grid()
        return ax

class StatsPlotter(Plotter):
    plotter_name = ["stats"]
    def run(self, data, **args):
        for d in data:
            print "filename:", d.filename
            print "  %d fields" % (len(d.index))
            print "  %d data lines" % (len(d.xs()))
            if len(d.xs()) == 0:
                return
            for index in d.index:
                print "    %s:" % (index)
                print "      min:", np.amin(d.getDataFromField(index))
                print "      max:", np.amax(d.getDataFromField(index))
                print "      mean:", np.mean(d.getDataFromField(index))
        return None

class HeatmapPlotter(Plotter):
    plotter_name = ["heatmap"]
    def run(self, data, **args):
        fig, ax = plt.subplots()
        for d in data:
            xs = d.xs()
            ys = d.ys()
            zs = d.zs()
            vmin = np.amin(zs)
            vmax = np.amax(zs)
            xnum = len(list(set(xs)))
            ynum = len(list(set(ys)))
            image = np.arange(0, xnum * ynum, 1.0).reshape((xnum, ynum))
            for x, xi in zip(sorted(list(set(xs))), range(xnum)):
                for y, yi in zip(sorted(list(set(ys))), range(ynum)):
                    for org_x, org_y, z in zip(xs, ys, zs):
                        if org_x == x and org_y == y:
                            image[xi][yi] = z
            #ax.invert_yaxis()
            cax = ax.imshow(image, vmax=vmax, vmin=vmin,
                            aspect="auto",
                            interpolation="none",
                            cmap="gnuplot")
            ax.set_xticklabels(sorted(list(set(xs))))
            ax.set_yticklabels(sorted(list(set(ys))))
        fig.colorbar(cax)
        return ax

PLOTTER_CLASSES = [ScatterPlotter, LinePlotter, HistogramPlotter,
                   StatsPlotter, HeatmapPlotter]

class PltCli(object):
    """Application class"""
    def __init__(self, args):
        for klass in PLOTTER_CLASSES:
            if args.type in klass.plotter_name:
                self.plotter = klass()
        self.args = args
        # expand self.args.files into self.files
        expanded_files = [expandFile(f) for f in self.args.files]
        self.files = list(chain.from_iterable(expanded_files))
    def run(self):
        # Parse file first
        if self.args.label:
            data = [FileData(f[0], f[1], f[2], f[3], label=l, filter=self.args.filter)
                    for f,l in
                    zip(self.files, self.args.label)]
        else:
            data = [FileData(f[0], f[1], f[2], f[3], filter=self.args.filter)
                    for f in self.files]
        for d in data:
            d.read()
        # setup color theme
        for theme in THEME_CLASSES:
            if self.args.color_theme in theme.theme_name:
                color_theme = theme(self.args.color_offset)
                mpl.rcParams['axes.color_cycle'] = color_theme.colorCycle()
                break
        ax = self.plotter.run(data,
                              show_grid=self.args.show_grid,
                              sort_x=self.args.sort_x,
                              tight=self.args.tight,
                              alpha=self.args.alpha,
                              scatter_size=self.args.scatter_size,
                              line_width=self.args.line_width,
                              color_theme=color_theme,
                              fill=self.args.fill,
                              fit_parabora=self.args.fit_parabora,
                              fit_parabora_inv=self.args.fit_parabora_inv)
        if self.args.type == "stats":
            return
        if self.args.min_x != None and self.args.max_x != None:
            ax.set_xlim(self.args.min_x, self.args.max_x)
        if self.args.min_y != None  and self.args.max_y != None:
            ax.set_ylim(self.args.min_y, self.args.max_y)
        if self.args.title:
            ax.set_title(self.args.title)
        if self.args.x_title:
            ax.set_xlabel(self.args.x_title, size=22)
        if self.args.y_title:
            ax.set_ylabel(self.args.y_title, size=22)
        if self.args.no_x_ticks:
            ax.get_xaxis().set_visible(False)
        if self.args.no_y_ticks:
            ax.get_yaxis().set_visible(False)
        if not self.args.no_legend:
            if self.args.legend_pos == "ru":
                plt.legend(loc=1)
            elif self.args.legend_pos == "lu":
                plt.legend(loc=2)
            elif self.args.legend_pos == "ll":
                plt.legend(loc=3)
            elif self.args.legend_pos == "rl":
                plt.legend(loc=4)
        if self.args.output:
            plt.savefig(self.args.output)
        else:
            plt.show()

if __name__ == "__main__":
    parser = ConfigParser()
    args = parser.arg_parser().parse_args()
    pltcli = PltCli(args)
    pltcli.run()
